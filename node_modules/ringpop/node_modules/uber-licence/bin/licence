#!/usr/bin/env node
// Copyright (c) 2015 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

'use strict';

var readdirp = require('readdirp');
var minimist = require('minimist');
var fs = require('fs');
var process = require('process');
var console = require('console');
var parallel = require('run-parallel');

var VALID_LICENSES = require('../valid-licences.js');

var argv = minimist(process.argv.slice(2));
var cwd = process.cwd();

/*eslint no-process-exit: 0, no-console: 0*/
// jscs:disable maximumLineLength
if (argv.help || argv.h) {
    console.log('uber-licence');
    console.log('  ');
    console.log('  This binary will add a license to the top');
    console.log('  of all your files');
    console.log('');
    console.log('  Options:');
    console.log('    --dry      does not write to files');
    console.log('    --file     pattern of files to modify');
    console.log('    --dir      pattern for directories containing files');
    process.exit(0);
}

var fileFilter = ['*.js'];
if (typeof argv.file === 'string') {
    fileFilter = [argv.file];
} else if (Array.isArray(argv.file)) {
    fileFilter = argv.file;
}

var directoryFilter = ['!.git', '!node_modules', '!coverage', '!env', '!.tox'];
if (typeof argv.dir === 'string') {
    directoryFilter = [argv.dir];
} else if (Array.isArray(argv.dir)) {
    directoryFilter = argv.dir;
}

var stream = readdirp({
    root: cwd,
    fileFilter: fileFilter,
    directoryFilter: directoryFilter
});

var files = [];

stream.on('data', function onData(e) {
    files.push(e.path);
});
stream.once('end', processFiles);

function processFiles() {
    parallel(files.map(function process(fileName) {
        return checkFile.bind(null, fileName);
    }), onProcessed);

    function onProcessed(err, contents) {
        if (err) {
            throw err;
        }

        contents = contents.filter(Boolean);

        if (argv.dry && contents.length > 0) {
            return process.exit(1);
        }

        contents.forEach(function fixFile(obj) {
            appendFile(obj.file, obj.content);
        });
    }
}

function getCommentStart(path) {
    if (path.match(/\.(js|go|java)$/)) {
        return '//';
    } else if (path.match(/\.(pyx?|pxd)$/)) {
        return '#';
    }
    return null;
}

function checkFile(path, cb) {
    fs.readFile(path, 'utf8', onContent);

    var commentStart = getCommentStart(path);

    function onContent(err, content) {
        if (err) {
            return cb(err);
        }

        if (content.length === 0) {
            // Ignore empty files
            return cb(null);
        }

        var normalizedContent = content;
        if (commentStart) {
            var regex = new RegExp('^ *' + commentStart, 'gm');
            normalizedContent = normalizedContent
                .replace(regex, '')
                .replace(/\n/g, ' ')
                .replace(/\s+/g, ' ');
        }

        var isValid = VALID_LICENSES.some(function checkHead(licenseText) {
            licenseText = licenseText.replace(/\n/g, ' ').replace(/\s+/g, ' ');
            return normalizedContent.indexOf(licenseText) >= 0;
        });

        if (isValid) {
            return cb(null);
        }

        var lines = content.split('\n');

        console.log('invalid file', {
            file: path,
            content: lines.slice(0, 3)
        });

        cb(null, {
            file: path,
            content: content
        });
    }
}

function appendFile(path, content) {
    var commentStart = getCommentStart(path);

    var license = VALID_LICENSES[2];
    if (commentStart) {
        var lines = license.split('\n');
        for (var i = 0, len = lines.length; i < len; i++) {
            if (lines[i].length) {
                lines[i] = commentStart + ' ' + lines[i];
            } else {
                lines[i] = commentStart + lines[i];
            }
        }
        license = lines.join('\n');
    }

    var contentLines = content.split('\n');

    var firstLine = contentLines[0];
    var remainingLines = contentLines.slice(1).join('\n');

    var properContent;
    if (firstLine.match(/^#!|# ?encoding=/m)) {
        // If the first line is a shebang or encoding=utf8 comment, add the
        // license after it.
        properContent = firstLine + '\n\n' + license + '\n\n' + remainingLines;
    } else {
        properContent = license + '\n\n' + content;
    }

    fs.writeFile(path, properContent, onWrite);
    function onWrite(err) {
        if (err) {
            throw err;
        }

        console.log('fixed file', {
            path: path
        });
    }
}
