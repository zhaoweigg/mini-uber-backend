diff --git a/index.js b/index.js
index 5e45e8f..570e09d 100644
--- a/index.js
+++ b/index.js
@@ -59,6 +59,7 @@ function RingPop(options) {
         return new RingPop(options);
     }
 
+    debugger;
     if (!options) {
         throw errors.OptionsRequiredError({ method: 'RingPop' });
     }
diff --git a/lib/membership.js b/lib/membership.js
index 64c8f9e..ac3ae0e 100644
--- a/lib/membership.js
+++ b/lib/membership.js
@@ -25,15 +25,89 @@ var farmhash = require('farmhash');
 var Member = require('./member.js');
 var MembershipUpdateRules = require('./membership-update-rules.js');
 var mergeMembershipChangesets = require('./membership-changeset-merge.js');
+var safeParse = require('./util').safeParse;
 var util = require('util');
 var uuid = require('node-uuid');
 
+
 function Membership(ringpop) {
     this.ringpop = ringpop;
     this.members = [];
     this.membersByAddress = {};
     this.checksum = null;
     this.stashedUpdates = [];
+
+    // XXX testing
+    var channel = this.ringpop.channel;
+    var self = this;
+    channel.register('/tap/membership/update/subscribe', function(req, res, arg2) {
+        // expect parseable JSON { hostPort: 'foo.com:34134', path: '/foo/bar' }
+        // will receive JSON of the same events broadcasted here as on
+        // 'update'
+        res.headers.as = 'raw';
+        console.log('GOT HERE');
+        var sub = safeParse(arg2);
+        if (! sub || ! sub.hostPort | ! sub.path) {
+            var err = 'invalid tap destination received: ' + arg2.toString()
+            self.ringpop.logger.debug(err);
+            console.error(err);
+            console.error(sub);
+            res.sendNotOk(null, err);
+        }
+        else {
+            // parse sub
+            var opts = _.extend(
+                {
+                    host: sub.hostPort,
+                    timeout: 1000,
+                    serviceName: 'ringpop',
+                    hasNoParent: true,
+                    trace: false,
+                    retryLimit: 3,
+                    headers: {
+                        'as': 'raw',
+                        'cn': 'ringpop'
+                    }
+                },
+                _.omit(sub, 'hostPort', 'path')
+            );
+
+            // early trigger identification
+            channel.waitForIdentified({ host: sub.hostPort }, function() {});
+
+            var onUpdate = function onUpdate(updates) {
+                console.error('GOT AN UPDATE!');
+                channel.waitForIdentified({ host: sub.hostPort }, function(err) {
+                    if (!err && !res.ok) {
+                        err = new Error(String(arg3));
+                    }
+                    if (err) {
+                        err = 'bad response to membership update forward' + err;
+                        self.ringpop.logger.warn(err, {
+                            address: sub.hostPort,
+                            err: err
+                        });
+                    }
+                    channel
+                        .request(opts)
+                        .send(sub.path, 'UPDATE MADE IT THROUGH', null, function(err, res1, res2) {
+                            if (err) {
+                                err = 'bad response to membership update forward:' + err;
+                                self.ringpop.logger.warn('bad response to membership update forward', {
+                                    address: sub.hostPort,
+                                    err: err
+                                });
+                            }
+                        });     
+                });
+            }
+
+            var updateListener = self.on('set', onUpdate);
+            var setListener = self.on('updated', onUpdate);
+            console.log('all is good!');
+            res.sendOk();
+        }
+    });
 }
 
 util.inherits(Membership, EventEmitter);
diff --git a/main.js b/main.js
index 251aeee..0bd85aa 100755
--- a/main.js
+++ b/main.js
@@ -33,6 +33,7 @@ function main() {
 
     if (!listen) {
         console.error('Error: listen arg is required');
+        program.outputHelp();
         process.exit(1);
     }
 
@@ -40,6 +41,7 @@ function main() {
         logger: createLogger('tchannel'),
     });
 
+    debugger;
     var ringpop = new RingPop({
         app: 'ringpop',
         hostPort: listen,
diff --git a/scripts/tick-cluster.js b/scripts/tick-cluster.js
index bed792c..1142816 100755
--- a/scripts/tick-cluster.js
+++ b/scripts/tick-cluster.js
@@ -397,7 +397,10 @@ function ClusterProc(port) {
             output += line.replace(/^\s+/g, ' ');
 
             if (totalOpenBraces === totalCloseBraces) {
-                logMsg(port, output);
+                if (output.indexOf('tchannel info ') === -1 &&
+                    output.indexOf('tchannel warn ') === -1) {
+                    logMsg(port, output);
+                }
                 output = '';
                 totalOpenBraces = 0;
                 totalCloseBraces = 0;
