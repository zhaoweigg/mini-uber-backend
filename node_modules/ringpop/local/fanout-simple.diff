diff --git a/index.js b/index.js
index 310a1e5..3fbd612 100644
--- a/index.js
+++ b/index.js
@@ -96,7 +96,9 @@ function RingPop(options) {
 
     this.debugFlags = {};
     this.joinSize = options.joinSize;
-    this.pingReqSize = 3;           // ping-req fanout
+    this.pingUpdateFanoutSize = 2;   // REVIEW 
+    this.pingUpdateFanoutAgeMax = 0; // 0 = only send out unsent changes
+    this.pingReqSize = 3;            // ping-req fanout
     this.pingReqTimeout = options.pingReqTimeout || 5000;
     this.pingTimeout = options.pingTimeout || 1500;
     this.joinTimeout = options.joinTimeout || 1000;
diff --git a/lib/swim/ping-sender.js b/lib/swim/ping-sender.js
index ebd6bc7..8a3b51e 100644
--- a/lib/swim/ping-sender.js
+++ b/lib/swim/ping-sender.js
@@ -19,17 +19,19 @@
 // THE SOFTWARE.
 'use strict';
 
+var _ = require('underscore');
 var safeParse = require('../util').safeParse;
 
-function PingSender(ring, member, callback) {
+function PingSender(ring, member, fanoutSize, callback) {
     this.ring = ring;
-    this.address = member.address || member;
+    this.target = member.address || member;
+    this.fanoutSize = +(fanoutSize || 1);
     this.callback = callback;
 }
 
 PingSender.prototype.onPing = function onPing(err, res1, res2) {
     if (err) {
-        this.ring.debugLog('ping failed member=' + this.address + ' err=' + err.message, 'p');
+        this.ring.debugLog('ping failed member=' + this.target + ' err=' + err.message, 'p');
         return this.doCallback(false);
     }
 
@@ -38,7 +40,7 @@ PingSender.prototype.onPing = function onPing(err, res1, res2) {
         this.ring.membership.update(bodyObj.changes);
         return this.doCallback(true, bodyObj);
     }
-    this.ring.logger.warn('ping failed member=' + this.address + ' bad response body=' + res2.toString());
+    this.ring.logger.warn('ping failed member=' + this.target + ' bad response body=' + res2.toString());
     return this.doCallback(false);
 };
 
@@ -46,7 +48,7 @@ PingSender.prototype.onPing = function onPing(err, res1, res2) {
 PingSender.prototype.doCallback = function doCallback(isOk, bodyObj) {
     bodyObj = bodyObj || {};
 
-    this.ring.debugLog('ping response member=' + this.address + ' isOk=' + isOk + ' changes=' + JSON.stringify(bodyObj.changes), 'p');
+    this.ring.debugLog('ping response member=' + this.target + ' isOk=' + isOk + ' changes=' + JSON.stringify(bodyObj.changes), 'p');
 
     if (this.callback) {
         this.callback(isOk, bodyObj);
@@ -55,8 +57,8 @@ PingSender.prototype.doCallback = function doCallback(isOk, bodyObj) {
 };
 
 PingSender.prototype.send = function send() {
-    var options = {
-        host: this.address,
+    var optionsBase = {
+        host: this.target,
         timeout: this.ring.pingTimeout,
         serviceName: 'ringpop',
         hasNoParent: true,
@@ -75,22 +77,26 @@ PingSender.prototype.send = function send() {
         sourceIncarnationNumber: this.ring.membership.getIncarnationNumber()
     });
 
-    this.ring.debugLog('ping send member=' + this.address + ' changes=' + JSON.stringify(changes), 'p');
+    this.ring.debugLog('ping send member=' + this.target + ' changes=' + JSON.stringify(changes), 'p');
 
+    var fan = this.getFan(changes);
     var self = this;
-    this.ring.channel
-        .waitForIdentified({
-            host: options.host
-        }, onIdentified);
+    fan.forEach(sendSingle);
 
-    function onIdentified(err) {
+    function sendSingle(target) {
+        self.ring.channel
+            .waitForIdentified({
+                host: target
+            }, onIdentified.bind(null, target));
+    }
+
+    function onIdentified(target, err) {
         if (err) {
             return self.onPing(err);
         }
-
         self.ring.channel
-            .request(options)
-            .send('/protocol/ping', null, body, function(err, res, arg2, arg3) {
+            .request(_.extend({}, optionsBase, { host: target }))
+            .send('/protocol/ping', null, body, function (err, res, arg2, arg3) {
                 if (!err && !res.ok) {
                     err = new Error(String(arg3));
                 }
@@ -99,9 +105,19 @@ PingSender.prototype.send = function send() {
     }
 };
 
+PingSender.prototype.getFan = function getFan(changes) {
+    var target = [this.target];
+    if (changes && changes.length > 1 && this.fanoutSize > 1) {
+        target = target.concat(
+            this.ring.membership.getRandomPingableMembers(
+                this.fanoutSize - 1, [this.target]));
+    }
+    return target;
+};
+
 module.exports = function sendPing(opts, callback) {
     opts.ringpop.stat('increment', 'ping.send');
 
-    var sender = new PingSender(opts.ringpop, opts.target, callback);
+    var sender = new PingSender(opts.ringpop, opts.target, opts.fanoutSize, callback);
     sender.send();
 };
