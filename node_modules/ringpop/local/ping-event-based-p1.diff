diff --git a/lib/swim/gossip.js b/lib/swim/gossip.js
index c7f7a28..6674e56 100644
--- a/lib/swim/gossip.js
+++ b/lib/swim/gossip.js
@@ -18,9 +18,12 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 'use strict';
+
+var EventEmitter = require('events').EventEmitter;
 var metrics = require('metrics');
 var sendPing = require('./ping-sender.js');
 var sendPingReq = require('./ping-req-sender.js');
+var util = require('util');
 
 function Gossip(options) {
     this.ringpop = options.ringpop;
@@ -39,6 +42,11 @@ function Gossip(options) {
     this.outstandingPings = 0;
 }
 
+// Gossip emits following events:
+// 'ping' (...)
+// 'pingResponse' (...)
+util.inherits(Gossip, EventEmitter);
+
 Gossip.prototype.computeProtocolDelay = function computeProtocolDelay() {
     if (this.numProtocolPeriods) {
         var target = this.lastProtocolPeriod + this.lastProtocolRate;
@@ -108,15 +116,16 @@ Gossip.prototype.pingNextMember = function pingNextMember(callback) {
     sendPing({
         ringpop: self.ringpop,
         target: member
-    }, function(isOk, body) {
+    }, function(err, body) {
         self.ringpop.stat('timing', 'ping', start);
-        if (isOk) {
+        if (! err) {
             self.outstandingPings--;
             self.ringpop.membership.update(body.changes);
             return callback();
         }
 
         if (self.ringpop.destroyed) {
+            // XXX why error here instead of callback(); ?
             return callback(new Error('destroyed whilst pinging'));
         }
 
@@ -141,6 +150,15 @@ Gossip.prototype.pingNextMember = function pingNextMember(callback) {
     });
 };
 
+Gossip.prototype.handlePingResponse = function(body) {
+    this.outstandingPings--;
+    this.ringpop.membership.update(body.changes);
+};
+
+Gossip.prototype.handlePingTimeout = function() {
+    
+};
+
 Gossip.prototype.start = function start() {
     if (!this.isStopped) {
         this.ringpop.logger.debug('gossip has already started', {
diff --git a/lib/swim/ping-sender.js b/lib/swim/ping-sender.js
index ebd6bc7..d7c94dc 100644
--- a/lib/swim/ping-sender.js
+++ b/lib/swim/ping-sender.js
@@ -27,31 +27,26 @@ function PingSender(ring, member, callback) {
     this.callback = callback;
 }
 
-PingSender.prototype.onPing = function onPing(err, res1, res2) {
+PingSender.prototype.onPingResponse = function onPingResponse(err, res, bodyBuf) {
+    var bodyObj = null;
     if (err) {
         this.ring.debugLog('ping failed member=' + this.address + ' err=' + err.message, 'p');
-        return this.doCallback(false);
     }
-
-    var bodyObj = safeParse(res2.toString());
-    if (bodyObj && bodyObj.changes) {
-        this.ring.membership.update(bodyObj.changes);
-        return this.doCallback(true, bodyObj);
+    else {
+        bodyObj = safeParse(bodyBuf.toString());
+        if (! bodyObj) {
+            this.ring.logger.warn('ping failed member=' + this.address + ' bad response body=' + bodyBuf.toString());
+            err = 'bad response body';
+        }
+        else {
+            this.ring.debugLog('ping response member=' + this.address + ' status=ok changes=' + JSON.stringify(bodyObj.changes), 'p');
+        }
     }
-    this.ring.logger.warn('ping failed member=' + this.address + ' bad response body=' + res2.toString());
-    return this.doCallback(false);
-};
-
-// make sure that callback doesn't get run twice
-PingSender.prototype.doCallback = function doCallback(isOk, bodyObj) {
-    bodyObj = bodyObj || {};
-
-    this.ring.debugLog('ping response member=' + this.address + ' isOk=' + isOk + ' changes=' + JSON.stringify(bodyObj.changes), 'p');
-
     if (this.callback) {
-        this.callback(isOk, bodyObj);
-        this.callback = null;
+        this.ring.gossip.once('pingResponse', this.callback);
+        this.callback = null; // make sure that callback doesn't get run twice
     }
+    this.ring.gossip.emit('pingResponse', err, bodyObj);
 };
 
 PingSender.prototype.send = function send() {
@@ -85,7 +80,7 @@ PingSender.prototype.send = function send() {
 
     function onIdentified(err) {
         if (err) {
-            return self.onPing(err);
+            return self.onPingResponse(err);
         }
 
         self.ring.channel
@@ -94,8 +89,9 @@ PingSender.prototype.send = function send() {
                 if (!err && !res.ok) {
                     err = new Error(String(arg3));
                 }
-                self.onPing(err, arg2, arg3);
+                self.onPingResponse(err, arg2, arg3);
             });
+        self.ring.gossip.emit('ping', options, body);
     }
 };
 
diff --git a/server/ping-req-handler.js b/server/ping-req-handler.js
index 16ee70e..59b8717 100644
--- a/server/ping-req-handler.js
+++ b/server/ping-req-handler.js
@@ -42,18 +42,18 @@ module.exports = function handlePingReq(opts, callback) {
     sendPing({
         ringpop: ringpop,
         target: target
-    }, function (isOk, body) {
+    }, function (err, body) {
         ringpop.stat('timing', 'ping-req-ping', start);
-        ringpop.debugLog('ping-req recv ping source=' + source + ' target=' + target + ' isOk=' + isOk, 'p');
+        ringpop.debugLog('ping-req recv ping source=' + source + ' target=' + target + ' err=' + err, 'p');
 
-        if (isOk) {
+        if (! err) {
             ringpop.membership.update(body.changes);
         }
 
         callback(null, {
             changes: ringpop.dissemination.issueAsReceiver(source,
                 sourceIncarnationNumber, checksum),
-            pingStatus: isOk,
+            pingStatus: !err,
             target: target
         });
     });
diff --git a/test/integration/swim-test.js b/test/integration/swim-test.js
index 53c3c5a..79c0979 100644
--- a/test/integration/swim-test.js
+++ b/test/integration/swim-test.js
@@ -70,8 +70,8 @@ testRingpopCluster({
     sendPing({
         ringpop: cluster[0],
         target: target,
-    }, function onPing(ok, body) {
-        assert.true(ok, 'ok is ok');
+    }, function onPing(err, body) {
+        assert.false(err, 'no error');
         assert.end();
     });
 });
@@ -90,6 +90,8 @@ testRingpopCluster({
         pingReqSize: 3
     }, function onPingReq(err, res) {
         assert.ifErr(err, 'no error occurred');
+        console.log('RES:');
+        console.log(res);
         assert.equal(res.pingReqAddrs.length, 1,
             'number of selected ping-req members is correct');
         assert.ok(res.pingReqSuccess.address === cluster[2].hostPort,
