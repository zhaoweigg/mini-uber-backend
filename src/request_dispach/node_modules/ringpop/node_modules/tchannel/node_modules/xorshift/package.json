{
  "name": "xorshift",
  "description": "Random number generator using xorshift128+",
  "version": "0.2.0",
  "author": {
    "name": "Andreas Madsen",
    "email": "amwebdk@gmail.com"
  },
  "contributors": [
    {
      "name": "Emil Bay",
      "email": "github@tixz.dk"
    }
  ],
  "main": "./xorshift.js",
  "scripts": {
    "test": "tap test.js",
    "benchmark": "node ./benchmark.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/AndreasMadsen/xorshift.git"
  },
  "keywords": [
    "random",
    "rng",
    "xorshift"
  ],
  "devDependencies": {
    "tap": "0.4.x"
  },
  "license": "MIT",
  "readme": "#xorshift [![Build Status](https://travis-ci.org/AndreasMadsen/xorshift.svg?branch=master)](https://travis-ci.org/AndreasMadsen/xorshift)\n\n> Random number generator using xorshift128+\n\n## Installation\n\n```sheel\n# npm install xorshift\n```\n\n## Example\n\n```javascript\nvar xorshift = require('xorshift');\n\nfor (var i = 0; i < 10; i++) {\n  console.log(xorshift.random()); // number in range [0, 1)\n}\n```\n\n## Documentation\n\nThis module exports a default pseudo random generator. This generators seed have\nalready been set (using `Date.now()`). If this is not suitable a custom\ngenerator can be initialized using the constructor function\n`xorshift.constructor`. In both cases random numbers can be generated using\nthe two methods, `.random` and `.randomint`.\n\n```javascript\nvar xorshift = require('xorshift');\n```\n\n### xorshift.random()\n\nThis method returns a random 64bit double, with its value in the range [0, 1).\nThat means 0 is inclusive and 1 is exclusive. This is completely similar to\n`Math.random()`.\n\n```javascript\nconsole.log(xorshift.random()); // number between 0 and 1\n```\n\nThis method will serve most purposes, for instance to randomly select between\n2, 3 and 4, this function can be used:\n\n```javascript\nfunction uniformint(a, b) {\n  return Math.floor(a + xorshift().random() * (b - a));\n}\n\nconsole.log(uniformint(2, 4));\n```\n\n### xorshift.randomint()\n\nThis method returns a random 64bit integer. Since JavaScript don't support\n64bit integers, the number is represented as an array with two elements in\nbig-endian order.\n\nThis method is useful if high precision is required, the `xorshift.random()`\nmethod won't allow you to get this precision since a 64bit IEEE754 double\nonly contains the 52 most significant bits.\n\n```javascript\nvar bview = require('binary-view');\nconsole.log(bview( new Uint32Array(xorshift.randomint()) ));\n```\n\n### xorshift.constructor\n\nThis method is used to construct a new random generator, with a specific seed.\nThis can be useful when testing software where random numbers are involved and\ngetting consistent results are important.\n\n```javascript\nvar XorShift = require('xorshift').constructor;\nvar rng1 = new XorShift([1, 0, 2, 0]);\nvar rng2 = new XorShift([1, 0, 2, 0]);\n\nassert(rng1.random() === rng2.random());\n```\n\nA `XorShift` instance have both methods `random` and `randomint`. In fact the\n`xorshift` module is an instance of the `XorShift` constructor.\n\n## Reference\n\nThis module implements the xorshift128+ pseudo random number generator.\n\n> This is the fastest generator passing BigCrush without systematic\n> errors, but due to the relatively short period it is acceptable only\n> for applications with a very mild amount of parallelism; otherwise, use\n> a xorshift1024* generator.\n> â€“ <cite> http://xorshift.di.unimi.it </cite>\n\nThis source also have a\n[reference implementation](http://xorshift.di.unimi.it/xorshift128plus.c)\nfor the xorshift128+ generator. A wrapper around this implementation have been\ncreated and is used for testing this module. To compile and run it:\n\n```shell\ngcc -O2 reference.c -o reference\n./reference <numbers> <seed0> <seed1>\n```\n\n* `<numbers>` can be any number greater than zero, and it will be the amount\nif random numbers in the stdout. The default value is `10`.\n* `<seed0>` and `<seed1>` forms the 128bit seed that the algorithm uses. Default\nis `[1, 2]`.\n\n##License\n\n**The software is license under \"MIT\"**\n\n> Copyright (c) 2014 Andreas Madsen & Emil Bay\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/AndreasMadsen/xorshift/issues"
  },
  "_id": "xorshift@0.2.0",
  "dist": {
    "shasum": "103c07b0b8e5a63eacc9e175bdd3772292e8b3bf"
  },
  "_from": "xorshift@^0.2.0",
  "_resolved": "https://registry.npmjs.org/xorshift/-/xorshift-0.2.0.tgz"
}
