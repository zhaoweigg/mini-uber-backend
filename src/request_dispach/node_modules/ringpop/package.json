{
  "name": "ringpop",
  "description": "Scalable, fault-tolerant application-layer sharding",
  "contributors": [
    {
      "name": "ben fleis",
      "email": "ben.fleis@gmail.com"
    },
    {
      "name": "Alex Hauser",
      "email": "ahauser@uber.com"
    },
    {
      "name": "Rui Hu",
      "email": "ruihu.pvt@gmail.com"
    },
    {
      "name": "Bob Nugmanov",
      "email": "bob.nugmanov@gmail.com"
    },
    {
      "name": "Matt Ranney",
      "email": "mranney@uber.com"
    },
    {
      "name": "Jeff Wolski",
      "email": "wolski@uber.com"
    },
    {
      "name": "Jake Verbaten",
      "email": "raynos2@gmail.com"
    },
    {
      "name": "Mark Yen",
      "email": "mark@uber.com"
    }
  ],
  "version": "10.14.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/uber/ringpop.git"
  },
  "bin": {
    "ringpop": "./main.js"
  },
  "scripts": {
    "test": "npm run jshint && node test/index.js | faucet",
    "test-debug": "node debug test/index.js",
    "test-integration": "node test/integration/index.js | faucet",
    "test-unit": "node test/unit/index.js | faucet",
    "add-licence": "uber-licence",
    "check-licence": "uber-licence --dry",
    "cover": "istanbul cover --print detail --report html test/index.js | faucet",
    "jshint": "jshint --verbose *.js lib/**/*.js scripts/*.js server/**/*.js",
    "travis": "npm run cover -s && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0)",
    "view-cover": "opn coverage/index.html"
  },
  "dependencies": {
    "body": "^5.0.0",
    "error": "^5.0.0",
    "farmhash": "^0.2.0",
    "metrics": "^0.1.8",
    "node-uuid": "^1.4.3",
    "toobusy": "^0.2.4",
    "uber-hammock": "^1.0.0",
    "underscore": "^1.5.2"
  },
  "devDependencies": {
    "after": "^0.8.1",
    "async": "^0.9.0",
    "benchmark": "^1.0.0",
    "buffer-equal": "0.0.1",
    "cli-color": "^0.3.2",
    "commander": "^2.6.0",
    "coveralls": "^2.11.2",
    "debug-logtron": "^2.1.0",
    "express": "^4.13.3",
    "faucet": "^0.0.1",
    "format-stack": "4.1.0",
    "glob": "^4.3.1",
    "istanbul": "^0.3.5",
    "itape": "^1.5.0",
    "jshint": "^2.5.6",
    "leaked-handles": "^5.1.0",
    "opn": "^1.0.1",
    "pre-commit": "^0.0.9",
    "tape": "^3.0.3",
    "tape-cluster": "2.1.0",
    "tchannel": "^3.6.13",
    "tcurl": "^4.11.1",
    "timer-shim": "^0.3.0",
    "tryit": "^1.0.1",
    "uber-licence": "^1.1.0",
    "winston": "^1.0.1"
  },
  "pre-commit": [
    "check-licence",
    "test"
  ],
  "pre-commit.silent": true,
  "itape": {
    "trace": {
      "debuglog": [
        "ringpop",
        "tchannel"
      ],
      "formatStack": true,
      "leakedHandles": {
        "fullStack": false
      }
    }
  },
  "readme": "# ringpop-node [![Build Status](https://travis-ci.org/uber/ringpop-node.svg?branch=master)](https://travis-ci.org/uber/ringpop-node)\nRingpop is a library that brings cooperation and coordination to distributed\napplications. It maintains a consistent hash ring on top of a membership protocol\nand provides request forwarding as a routing convenience. It can be used to\nshard your application in a way that's scalable and fault tolerant.\n\n# Installation\nTo install Ringpop for usage as a library:\n\n```\nnpm install ringpop\n```\n\nPrepare the current directory for development:\n\n```\nnpm install\n```\n\nTo be able to run the tests, make sure you have your open file limit\nrestriction on at least 4K:\n\n```\nulimit -n 4096\n```\n\n# Tick Cluster\nAn example application `scripts/tick-cluster.js` is included to this\nrepository. It just launches a ringpop cluster of a given size. Using this\napplication is the quickest way to start a ringpop cluster.\n\n```\n./scripts/tick-cluster.js --interpreter node main.js\n```\n\n# Example\nRun a 2-node Ringpop cluster from the command-line. Install Ringpop\nand TChannel, copy/paste the below into your editor and run!\n\n```js\nvar Ringpop = require('ringpop');\nvar TChannel = require('tchannel');\n\nfunction Cluster(opts) {\n    this.name = opts.name;\n    this.size = opts.size;\n    this.basePort = opts.basePort;\n    this.bootstrapNodes = [];\n\n    // Create the bootstrap list of nodes that'll\n    // be used to seed Ringpop for its join request.\n    for (var i = 0; i < this.size; i++) {\n        this.bootstrapNodes.push('127.0.0.1:' + (this.basePort + i));\n    }\n}\n\nCluster.prototype.launch = function launch(callback) {\n    var self = this;\n    var done = after(self.size, callback);\n\n    for (var i = 0; i < this.size; i++) {\n        var addr = this.bootstrapNodes[i];\n        var addrParts = addr.split(':');\n\n        var tchannel = new TChannel();\n        var ringpop = new Ringpop({\n            app: this.name,\n            hostPort: addr,\n            channel: tchannel.makeSubChannel({\n                serviceName: 'ringpop',\n                trace: false\n            })\n        });\n        ringpop.setupChannel();\n\n        // First make sure TChannel is accepting connections.\n        tchannel.listen(+addrParts[1], addrParts[0], listenCb(ringpop));\n    }\n\n\n    function listenCb(ringpop) {\n        // When TChannel is listening, bootstrap Ringpop. It'll\n        // try to join its friends in the bootstrap list.\n        return function onListen() {\n            ringpop.bootstrap(self.bootstrapNodes, done);\n        };\n    }\n};\n\n// IGNORE THIS! It's a little utility function that invokes\n// a callback after a specified number of invocations\n// of its shim.\nfunction after(count, callback) {\n    var countdown = count;\n\n    return function shim(err) {\n        if (typeof callback !== 'function') return;\n\n        if (err) {\n            callback(err);\n            callback = null;\n            return;\n        }\n\n        if (--countdown === 0) {\n            callback();\n            callback = null;\n        }\n    };\n}\n\nif (require.main === module) {\n    // Launch a Ringpop cluster of arbitrary size.\n    var cluster = new Cluster({\n        name: 'mycluster',\n        size: 2,\n        basePort: 3000\n    });\n\n    // When all nodes have been bootstrapped, your\n    // Ringpop cluster will be ready for use.\n    cluster.launch(function onLaunch(err) {\n        if (err) {\n            console.error('Error: failed to launch cluster');\n            process.exit(1);\n        }\n\n        console.log('Ringpop cluster is ready!');\n    });\n}\n```\n\n# Documentation\nInterested in where to go from here? Read the docs at\n[ringpop.readthedocs.org](https://ringpop.readthedocs.org).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/uber/ringpop/issues"
  },
  "_id": "ringpop@10.14.0",
  "_from": "ringpop@"
}
