{
  "name": "bufrw",
  "version": "1.2.1",
  "description": "Buffer Reading and Writing",
  "keywords": [],
  "author": {
    "name": "Joshua T Corbin",
    "email": "joshua@uber.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/uber/bufrw.git"
  },
  "main": "index.js",
  "homepage": "https://github.com/uber/bufrw",
  "bugs": {
    "url": "https://github.com/uber/bufrw/issues",
    "email": "joshua@uber.com"
  },
  "contributors": [
    {
      "name": "Joshua T Corbin"
    }
  ],
  "dependencies": {
    "ansi-color": "^0.2.1",
    "error": "^7.0.0",
    "xtend": "^4.0.0"
  },
  "devDependencies": {
    "coveralls": "^2.10.0",
    "faucet": "0.0.1",
    "istanbul": "^0.3.5",
    "itape": "^1.5.0",
    "jshint": "^2.6.3",
    "opn": "^1.0.1",
    "pre-commit": "0.0.9",
    "tape": "^3.4.0",
    "uber-licence": "^1.2.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/uber/bufrw/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "add-licence": "uber-licence",
    "check-licence": "uber-licence --dry",
    "check-ls": "npm ls 1>/dev/null",
    "cover": "istanbul cover --report html --print none test/index.js | faucet && istanbul report text",
    "lint": "jshint .",
    "test": "npm run check-ls -s && npm run lint -s && npm run cover -s && istanbul check-coverage",
    "trace": "itape test/index.js --trace",
    "travis": "npm run cover -s && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0)",
    "view-cover": "opn ./coverage/index.html"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "pre-commit": [
    "check-licence",
    "test"
  ],
  "pre-commit.silent": true,
  "itape": {
    "trace": {
      "debuglog": [
        "bufrw"
      ],
      "leakedHandles": {
        "timeout": 5001,
        "debugSockets": true
      },
      "formatStack": true
    }
  },
  "private": false,
  "uber-ngen-version": "5.0.0",
  "readme": "# bufrw\n\nBuffer Reading and Writing\n\n## Example\n\nSimple length-prefixed string:\n\n```js\nvar bufrw = require(\"bufrw\");\n\nvar buf = bufrw.toBuffer(bufrw.str1, \"hello world\");\n// <Buffer 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64>\nvar str = bufrw.fromBuffer(bufrw.str1, buf)\n// \"hello world\"\n```\n\n// TODO more examples\n\n## Concept and Motivation\n\nA combinatoric library for synchronous binary buffer reading and writing.\n\nThe design is to combine:\n- needed byte length calculation\n- writing into a pre-allocated buffer\n- reading from a buffer\n\nInto a single re-combinable data type, eventually supporting code generation\nfor efficiency.\n\nAny of those three steps may result in an error, so rather than rely on error\nthrow/catching we use an error-able result type.\n\n## API Documentation\n\nSee docs.jsig\n\n## Installation\n\n`npm install bufrw`\n\n## Tests\n\n`npm test`\n\n## NPM scripts\n\n - `npm run add-licence` This will add the licence headers.\n - `npm run cover` This runs the tests with code coverage\n - `npm run lint` This will run the linter on your code\n - `npm test` This will run the tests.\n - `npm run trace` This will run your tests in tracing mode.\n - `npm run travis` This is run by travis.CI to run your tests\n - `npm run view-cover` This will show code coverage in a browser\n\n## Contributors\n\n - Joshua T Corbin\n\n## MIT Licenced\n\n  [build-png]: https://secure.travis-ci.org/uber/bufrw.png\n  [build]: https://travis-ci.org/uber/bufrw\n  [cover-png]: https://coveralls.io/repos/uber/bufrw/badge.png\n  [cover]: https://coveralls.io/r/uber/bufrw\n  [dep-png]: https://david-dm.org/uber/bufrw.png\n  [dep]: https://david-dm.org/uber/bufrw\n  [test-png]: https://ci.testling.com/uber/bufrw.png\n  [tes]: https://ci.testling.com/uber/bufrw\n  [npm-png]: https://nodei.co/npm/bufrw.png?stars&downloads\n  [npm]: https://nodei.co/npm/bufrw\n",
  "readmeFilename": "README.md",
  "_id": "bufrw@1.2.1",
  "dist": {
    "shasum": "13eb96ce6d8e4901668645800d368d2c547fe86c"
  },
  "_from": "bufrw@^1.2.1",
  "_resolved": "https://registry.npmjs.org/bufrw/-/bufrw-1.2.1.tgz"
}
